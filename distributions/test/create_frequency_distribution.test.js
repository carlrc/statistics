"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const create_frequency_distribution_1 = require("../create_frequency_distribution");
test("it should create two classes in a list where the width is the difference between the high and low", () => {
    const list = [5, 25];
    const classWidth = 20;
    const expectedResult = [
        {
            class_limit_lower: 5,
            class_limit_upper: 24,
            class_boundary_lower: 4.5,
            class_boundary_upper: 24.5,
            class_midpoint: 14.5,
            class_width: classWidth,
            frequency: 1
        },
        {
            class_limit_lower: 25,
            class_limit_upper: 44,
            class_boundary_lower: 24.5,
            class_boundary_upper: 44.5,
            class_midpoint: 34.5,
            class_width: classWidth,
            frequency: 1
        }
    ];
    const result = create_frequency_distribution_1.createFrequencyDistribution(list, 5, classWidth);
    expect(result).toStrictEqual(expectedResult);
});
test("it should create a correct frequency distribution for a random set", () => {
    const list = [45, 25, 39, 5, 42, 48, 35, 12, 40, 16, 36, 27, 37, 30, 18, 22, 32, 54, 44, 29];
    const classWidth = 10;
    const expectedResult = [
        {
            class_boundary_lower: 4.5,
            class_boundary_upper: 14.5,
            class_limit_lower: 5,
            class_limit_upper: 14,
            class_midpoint: 9.5,
            class_width: 10,
            frequency: 2
        },
        {
            class_boundary_lower: 15.5,
            class_boundary_upper: 25.5,
            class_limit_lower: 16,
            class_limit_upper: 25,
            class_midpoint: 20.5,
            class_width: 10,
            frequency: 4
        },
        {
            class_boundary_lower: 26.5,
            class_boundary_upper: 36.5,
            class_limit_lower: 27,
            class_limit_upper: 36,
            class_midpoint: 31.5,
            class_width: 10,
            frequency: 6
        },
        {
            class_boundary_lower: 36.5,
            class_boundary_upper: 46.5,
            class_limit_lower: 37,
            class_limit_upper: 46,
            class_midpoint: 41.5,
            class_width: 10,
            frequency: 6
        },
        {
            class_boundary_lower: 47.5,
            class_boundary_upper: 57.5,
            class_limit_lower: 48,
            class_limit_upper: 57,
            class_midpoint: 52.5,
            class_width: 10,
            frequency: 2
        }
    ];
    const result = create_frequency_distribution_1.createFrequencyDistribution(list, 5, classWidth);
    expect(result).toStrictEqual(expectedResult);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlX2ZyZXF1ZW5jeV9kaXN0cmlidXRpb24udGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNyZWF0ZV9mcmVxdWVuY3lfZGlzdHJpYnV0aW9uLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvRkFBNkU7QUFHN0UsSUFBSSxDQUFDLG1HQUFtRyxFQUFFLEdBQUcsRUFBRTtJQUMzRyxNQUFNLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNyQixNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUM7SUFDdEIsTUFBTSxjQUFjLEdBQWlDO1FBQ2pEO1lBQ0ksaUJBQWlCLEVBQUUsQ0FBQztZQUNwQixpQkFBaUIsRUFBRSxFQUFFO1lBQ3JCLG9CQUFvQixFQUFFLEdBQUc7WUFDekIsb0JBQW9CLEVBQUUsSUFBSTtZQUMxQixjQUFjLEVBQUUsSUFBSTtZQUNwQixXQUFXLEVBQUUsVUFBVTtZQUN2QixTQUFTLEVBQUUsQ0FBQztTQUNmO1FBQ0Q7WUFDSSxpQkFBaUIsRUFBRSxFQUFFO1lBQ3JCLGlCQUFpQixFQUFFLEVBQUU7WUFDckIsb0JBQW9CLEVBQUUsSUFBSTtZQUMxQixvQkFBb0IsRUFBRSxJQUFJO1lBQzFCLGNBQWMsRUFBRSxJQUFJO1lBQ3BCLFdBQVcsRUFBRSxVQUFVO1lBQ3ZCLFNBQVMsRUFBRSxDQUFDO1NBQ2Y7S0FDSixDQUFDO0lBQ0YsTUFBTSxNQUFNLEdBQUcsMkRBQTJCLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNoRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ2pELENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLG9FQUFvRSxFQUFFLEdBQUcsRUFBRTtJQUM1RSxNQUFNLElBQUksR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM3RixNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUM7SUFDdEIsTUFBTSxjQUFjLEdBQUc7UUFDbkI7WUFDRSxvQkFBb0IsRUFBRSxHQUFHO1lBQ3pCLG9CQUFvQixFQUFFLElBQUk7WUFDMUIsaUJBQWlCLEVBQUUsQ0FBQztZQUNwQixpQkFBaUIsRUFBRSxFQUFFO1lBQ3JCLGNBQWMsRUFBRSxHQUFHO1lBQ25CLFdBQVcsRUFBRSxFQUFFO1lBQ2YsU0FBUyxFQUFFLENBQUM7U0FDYjtRQUNEO1lBQ0Usb0JBQW9CLEVBQUUsSUFBSTtZQUMxQixvQkFBb0IsRUFBRSxJQUFJO1lBQzFCLGlCQUFpQixFQUFFLEVBQUU7WUFDckIsaUJBQWlCLEVBQUUsRUFBRTtZQUNyQixjQUFjLEVBQUUsSUFBSTtZQUNwQixXQUFXLEVBQUUsRUFBRTtZQUNmLFNBQVMsRUFBRSxDQUFDO1NBQ2I7UUFDRDtZQUNFLG9CQUFvQixFQUFFLElBQUk7WUFDMUIsb0JBQW9CLEVBQUUsSUFBSTtZQUMxQixpQkFBaUIsRUFBRSxFQUFFO1lBQ3JCLGlCQUFpQixFQUFFLEVBQUU7WUFDckIsY0FBYyxFQUFFLElBQUk7WUFDcEIsV0FBVyxFQUFFLEVBQUU7WUFDZixTQUFTLEVBQUUsQ0FBQztTQUNiO1FBQ0Q7WUFDRSxvQkFBb0IsRUFBRSxJQUFJO1lBQzFCLG9CQUFvQixFQUFFLElBQUk7WUFDMUIsaUJBQWlCLEVBQUUsRUFBRTtZQUNyQixpQkFBaUIsRUFBRSxFQUFFO1lBQ3JCLGNBQWMsRUFBRSxJQUFJO1lBQ3BCLFdBQVcsRUFBRSxFQUFFO1lBQ2YsU0FBUyxFQUFFLENBQUM7U0FDYjtRQUNEO1lBQ0Usb0JBQW9CLEVBQUUsSUFBSTtZQUMxQixvQkFBb0IsRUFBRSxJQUFJO1lBQzFCLGlCQUFpQixFQUFFLEVBQUU7WUFDckIsaUJBQWlCLEVBQUUsRUFBRTtZQUNyQixjQUFjLEVBQUUsSUFBSTtZQUNwQixXQUFXLEVBQUUsRUFBRTtZQUNmLFNBQVMsRUFBRSxDQUFDO1NBQ2I7S0FDRixDQUFDO0lBQ0osTUFBTSxNQUFNLEdBQUcsMkRBQTJCLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUVoRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ2pELENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjcmVhdGVGcmVxdWVuY3lEaXN0cmlidXRpb259IGZyb20gXCIuLi9jcmVhdGVfZnJlcXVlbmN5X2Rpc3RyaWJ1dGlvblwiO1xuaW1wb3J0IHsgRnJlcXVlbmN5RGlzdHJpYnV0aW9uQ2xhc3MgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9mcmVxdWVuY3lfZGlzdHJpYnV0aW9uXCI7XG5cbnRlc3QoXCJpdCBzaG91bGQgY3JlYXRlIHR3byBjbGFzc2VzIGluIGEgbGlzdCB3aGVyZSB0aGUgd2lkdGggaXMgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgaGlnaCBhbmQgbG93XCIsICgpID0+IHtcbiAgICBjb25zdCBsaXN0ID0gWzUsIDI1XTtcbiAgICBjb25zdCBjbGFzc1dpZHRoID0gMjA7XG4gICAgY29uc3QgZXhwZWN0ZWRSZXN1bHQ6IEZyZXF1ZW5jeURpc3RyaWJ1dGlvbkNsYXNzW10gPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNsYXNzX2xpbWl0X2xvd2VyOiA1LFxuICAgICAgICAgICAgY2xhc3NfbGltaXRfdXBwZXI6IDI0LFxuICAgICAgICAgICAgY2xhc3NfYm91bmRhcnlfbG93ZXI6IDQuNSxcbiAgICAgICAgICAgIGNsYXNzX2JvdW5kYXJ5X3VwcGVyOiAyNC41LFxuICAgICAgICAgICAgY2xhc3NfbWlkcG9pbnQ6IDE0LjUsXG4gICAgICAgICAgICBjbGFzc193aWR0aDogY2xhc3NXaWR0aCxcbiAgICAgICAgICAgIGZyZXF1ZW5jeTogMVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBjbGFzc19saW1pdF9sb3dlcjogMjUsXG4gICAgICAgICAgICBjbGFzc19saW1pdF91cHBlcjogNDQsXG4gICAgICAgICAgICBjbGFzc19ib3VuZGFyeV9sb3dlcjogMjQuNSxcbiAgICAgICAgICAgIGNsYXNzX2JvdW5kYXJ5X3VwcGVyOiA0NC41LFxuICAgICAgICAgICAgY2xhc3NfbWlkcG9pbnQ6IDM0LjUsXG4gICAgICAgICAgICBjbGFzc193aWR0aDogY2xhc3NXaWR0aCxcbiAgICAgICAgICAgIGZyZXF1ZW5jeTogMVxuICAgICAgICB9XG4gICAgXTtcbiAgICBjb25zdCByZXN1bHQgPSBjcmVhdGVGcmVxdWVuY3lEaXN0cmlidXRpb24obGlzdCwgNSwgY2xhc3NXaWR0aCk7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9TdHJpY3RFcXVhbChleHBlY3RlZFJlc3VsdCk7XG59KTtcblxudGVzdChcIml0IHNob3VsZCBjcmVhdGUgYSBjb3JyZWN0IGZyZXF1ZW5jeSBkaXN0cmlidXRpb24gZm9yIGEgcmFuZG9tIHNldFwiLCAoKSA9PiB7XG4gICAgY29uc3QgbGlzdCA9IFs0NSwgMjUsIDM5LCA1LCA0MiwgNDgsIDM1LCAxMiwgNDAsIDE2LCAzNiwgMjcsIDM3LCAzMCwgMTgsIDIyLCAzMiwgNTQsIDQ0LCAyOV07XG4gICAgY29uc3QgY2xhc3NXaWR0aCA9IDEwO1xuICAgIGNvbnN0IGV4cGVjdGVkUmVzdWx0ID0gW1xuICAgICAgICB7XG4gICAgICAgICAgY2xhc3NfYm91bmRhcnlfbG93ZXI6IDQuNSxcbiAgICAgICAgICBjbGFzc19ib3VuZGFyeV91cHBlcjogMTQuNSxcbiAgICAgICAgICBjbGFzc19saW1pdF9sb3dlcjogNSxcbiAgICAgICAgICBjbGFzc19saW1pdF91cHBlcjogMTQsXG4gICAgICAgICAgY2xhc3NfbWlkcG9pbnQ6IDkuNSxcbiAgICAgICAgICBjbGFzc193aWR0aDogMTAsXG4gICAgICAgICAgZnJlcXVlbmN5OiAyXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzc19ib3VuZGFyeV9sb3dlcjogMTUuNSxcbiAgICAgICAgICBjbGFzc19ib3VuZGFyeV91cHBlcjogMjUuNSxcbiAgICAgICAgICBjbGFzc19saW1pdF9sb3dlcjogMTYsXG4gICAgICAgICAgY2xhc3NfbGltaXRfdXBwZXI6IDI1LFxuICAgICAgICAgIGNsYXNzX21pZHBvaW50OiAyMC41LFxuICAgICAgICAgIGNsYXNzX3dpZHRoOiAxMCxcbiAgICAgICAgICBmcmVxdWVuY3k6IDRcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzX2JvdW5kYXJ5X2xvd2VyOiAyNi41LFxuICAgICAgICAgIGNsYXNzX2JvdW5kYXJ5X3VwcGVyOiAzNi41LFxuICAgICAgICAgIGNsYXNzX2xpbWl0X2xvd2VyOiAyNyxcbiAgICAgICAgICBjbGFzc19saW1pdF91cHBlcjogMzYsXG4gICAgICAgICAgY2xhc3NfbWlkcG9pbnQ6IDMxLjUsXG4gICAgICAgICAgY2xhc3Nfd2lkdGg6IDEwLFxuICAgICAgICAgIGZyZXF1ZW5jeTogNlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3NfYm91bmRhcnlfbG93ZXI6IDM2LjUsXG4gICAgICAgICAgY2xhc3NfYm91bmRhcnlfdXBwZXI6IDQ2LjUsXG4gICAgICAgICAgY2xhc3NfbGltaXRfbG93ZXI6IDM3LFxuICAgICAgICAgIGNsYXNzX2xpbWl0X3VwcGVyOiA0NixcbiAgICAgICAgICBjbGFzc19taWRwb2ludDogNDEuNSxcbiAgICAgICAgICBjbGFzc193aWR0aDogMTAsXG4gICAgICAgICAgZnJlcXVlbmN5OiA2XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzc19ib3VuZGFyeV9sb3dlcjogNDcuNSxcbiAgICAgICAgICBjbGFzc19ib3VuZGFyeV91cHBlcjogNTcuNSxcbiAgICAgICAgICBjbGFzc19saW1pdF9sb3dlcjogNDgsXG4gICAgICAgICAgY2xhc3NfbGltaXRfdXBwZXI6IDU3LFxuICAgICAgICAgIGNsYXNzX21pZHBvaW50OiA1Mi41LFxuICAgICAgICAgIGNsYXNzX3dpZHRoOiAxMCxcbiAgICAgICAgICBmcmVxdWVuY3k6IDJcbiAgICAgICAgfVxuICAgICAgXTtcbiAgICBjb25zdCByZXN1bHQgPSBjcmVhdGVGcmVxdWVuY3lEaXN0cmlidXRpb24obGlzdCwgNSwgY2xhc3NXaWR0aCk7XG5cbiAgICBleHBlY3QocmVzdWx0KS50b1N0cmljdEVxdWFsKGV4cGVjdGVkUmVzdWx0KTtcbn0pO1xuIl19