"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const round_1 = require("../common/round");
const createFrequencyDistribution = (list, lowerLimit, classWidth, frequencyDistributions) => {
    if (list.length === 0) {
        return frequencyDistributions;
    }
    const lowestClass = createClass(lowerLimit, classWidth);
    const trimmedList = list.filter((x) => x > lowestClass.class_boundary_upper);
    const lowestClassWithFrequency = Object.assign({ frequency: list.length - trimmedList.length }, lowestClass);
    const newLowerLimit = Math.min(...trimmedList);
    const distributions = frequencyDistributions ? [...frequencyDistributions, lowestClassWithFrequency] : [lowestClassWithFrequency];
    return createFrequencyDistribution(trimmedList, newLowerLimit, classWidth, distributions);
};
exports.createFrequencyDistribution = createFrequencyDistribution;
const createClass = (lowerLimit, classWidth) => {
    const upperLimit = round_1.round((lowerLimit + classWidth) - 1);
    return {
        class_limit_lower: lowerLimit,
        class_limit_upper: upperLimit,
        class_boundary_lower: round_1.round(lowerLimit - 0.5),
        class_boundary_upper: round_1.round(upperLimit + 0.5),
        class_midpoint: round_1.round((lowerLimit + upperLimit) / 2),
        class_width: classWidth
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlX2ZyZXF1ZW5jeV9kaXN0cmlidXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjcmVhdGVfZnJlcXVlbmN5X2Rpc3RyaWJ1dGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJDQUFzQztBQUd0QyxNQUFNLDJCQUEyQixHQUFHLENBQUMsSUFBYyxFQUNkLFVBQWtCLEVBQ2xCLFVBQWtCLEVBQ2xCLHNCQUFxRCxFQUFnQyxFQUFFO0lBQ3hILElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDbkIsT0FBTyxzQkFBc0IsQ0FBQztLQUNqQztJQUVELE1BQU0sV0FBVyxHQUFHLFdBQVcsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDeEQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQzdFLE1BQU0sd0JBQXdCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUMzRyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUM7SUFDL0MsTUFBTSxhQUFhLEdBQUcsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxzQkFBc0IsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFFbEksT0FBTywyQkFBMkIsQ0FBQyxXQUFXLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxhQUFhLENBQUMsQ0FBQztBQUM5RixDQUFDLENBQUM7QUFlRSxrRUFBMkI7QUFiL0IsTUFBTSxXQUFXLEdBQUcsQ0FBQyxVQUFrQixFQUFFLFVBQWtCLEVBQThCLEVBQUU7SUFDdkYsTUFBTSxVQUFVLEdBQUcsYUFBSyxDQUFDLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3hELE9BQU87UUFDSCxpQkFBaUIsRUFBRSxVQUFVO1FBQzdCLGlCQUFpQixFQUFFLFVBQVU7UUFDN0Isb0JBQW9CLEVBQUUsYUFBSyxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7UUFDN0Msb0JBQW9CLEVBQUUsYUFBSyxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7UUFDN0MsY0FBYyxFQUFFLGFBQUssQ0FBQyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEQsV0FBVyxFQUFFLFVBQVU7S0FDMUIsQ0FBQztBQUNOLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7cm91bmR9IGZyb20gXCIuLi9jb21tb24vcm91bmRcIjtcbmltcG9ydCB7RnJlcXVlbmN5RGlzdHJpYnV0aW9uQ2xhc3N9IGZyb20gXCIuL2ludGVyZmFjZXMvZnJlcXVlbmN5X2Rpc3RyaWJ1dGlvblwiO1xuXG5jb25zdCBjcmVhdGVGcmVxdWVuY3lEaXN0cmlidXRpb24gPSAobGlzdDogbnVtYmVyW10sIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VyTGltaXQ6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc1dpZHRoOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJlcXVlbmN5RGlzdHJpYnV0aW9ucz86IEZyZXF1ZW5jeURpc3RyaWJ1dGlvbkNsYXNzW10pOiBGcmVxdWVuY3lEaXN0cmlidXRpb25DbGFzc1tdID0+IHtcbiAgICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZyZXF1ZW5jeURpc3RyaWJ1dGlvbnM7XG4gICAgfVxuXG4gICAgY29uc3QgbG93ZXN0Q2xhc3MgPSBjcmVhdGVDbGFzcyhsb3dlckxpbWl0LCBjbGFzc1dpZHRoKTtcbiAgICBjb25zdCB0cmltbWVkTGlzdCA9IGxpc3QuZmlsdGVyKCh4KSA9PiB4ID4gbG93ZXN0Q2xhc3MuY2xhc3NfYm91bmRhcnlfdXBwZXIpO1xuICAgIGNvbnN0IGxvd2VzdENsYXNzV2l0aEZyZXF1ZW5jeSA9IE9iamVjdC5hc3NpZ24oe2ZyZXF1ZW5jeTogbGlzdC5sZW5ndGggLSB0cmltbWVkTGlzdC5sZW5ndGh9LCBsb3dlc3RDbGFzcyk7XG4gICAgY29uc3QgbmV3TG93ZXJMaW1pdCA9IE1hdGgubWluKC4uLnRyaW1tZWRMaXN0KTtcbiAgICBjb25zdCBkaXN0cmlidXRpb25zID0gZnJlcXVlbmN5RGlzdHJpYnV0aW9ucyA/IFsuLi5mcmVxdWVuY3lEaXN0cmlidXRpb25zLCBsb3dlc3RDbGFzc1dpdGhGcmVxdWVuY3ldIDogW2xvd2VzdENsYXNzV2l0aEZyZXF1ZW5jeV07XG5cbiAgICByZXR1cm4gY3JlYXRlRnJlcXVlbmN5RGlzdHJpYnV0aW9uKHRyaW1tZWRMaXN0LCBuZXdMb3dlckxpbWl0LCBjbGFzc1dpZHRoLCBkaXN0cmlidXRpb25zKTtcbn07XG5cbmNvbnN0IGNyZWF0ZUNsYXNzID0gKGxvd2VyTGltaXQ6IG51bWJlciwgY2xhc3NXaWR0aDogbnVtYmVyKTogRnJlcXVlbmN5RGlzdHJpYnV0aW9uQ2xhc3MgPT4ge1xuICAgIGNvbnN0IHVwcGVyTGltaXQgPSByb3VuZCgobG93ZXJMaW1pdCArIGNsYXNzV2lkdGgpIC0gMSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2xhc3NfbGltaXRfbG93ZXI6IGxvd2VyTGltaXQsXG4gICAgICAgIGNsYXNzX2xpbWl0X3VwcGVyOiB1cHBlckxpbWl0LFxuICAgICAgICBjbGFzc19ib3VuZGFyeV9sb3dlcjogcm91bmQobG93ZXJMaW1pdCAtIDAuNSksXG4gICAgICAgIGNsYXNzX2JvdW5kYXJ5X3VwcGVyOiByb3VuZCh1cHBlckxpbWl0ICsgMC41KSxcbiAgICAgICAgY2xhc3NfbWlkcG9pbnQ6IHJvdW5kKChsb3dlckxpbWl0ICsgdXBwZXJMaW1pdCkgLyAyKSxcbiAgICAgICAgY2xhc3Nfd2lkdGg6IGNsYXNzV2lkdGhcbiAgICB9O1xufTtcblxuZXhwb3J0IHtcbiAgICBjcmVhdGVGcmVxdWVuY3lEaXN0cmlidXRpb25cbn07XG4iXX0=